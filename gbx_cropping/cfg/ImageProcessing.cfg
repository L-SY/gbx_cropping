#!/usr/bin/env python
PACKAGE = "gbx_cropping"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# 自适应阈值参数
gen.add("block_size", int_t, 0, "Block size for adaptive thresholding", 11, 3, 51)
gen.add("C", double_t, 0, "Constant subtracted from the mean in adaptive thresholding", 2.0, -10.0, 10.0)

# 圆形检测参数
gen.add("min_area", double_t, 0, "Minimum area for detected circles", 3000.0, 100.0, 500000.0)
gen.add("max_area", double_t, 0, "Maximum area for detected circles", 500000.0, 100.0, 1000000.0)
gen.add("circularity_threshold", double_t, 0, "Circularity threshold for circle detection", 0.1, 0.0, 1.0)

# 闭运算参数
gen.add("close_kernel_size", int_t, 0, "Kernel size for morphological close operation", 2, 1, 10)
gen.add("close_iterations", int_t, 0, "Iterations for morphological close operation", 3, 1, 10)

# 使用不同的枚举名称避免冲突
close_enum = gen.enum([
    gen.const("CLOSE_OP_CLOSE", int_t, 0, "Close operation"),
    gen.const("CLOSE_OP_OPEN", int_t, 1, "Open operation"),
    gen.const("CLOSE_OP_GRADIENT", int_t, 2, "Gradient operation")
], "Morphological operation type for close")

gen.add("close_operation", int_t, 0, "Morphological operation type for close", 0, 0, 2, edit_method=close_enum)

# 膨胀参数
gen.add("dilate_kernel_size", int_t, 0, "Kernel size for morphological dilate operation", 2, 1, 10)
gen.add("dilate_iterations", int_t, 0, "Iterations for morphological dilate operation", 3, 1, 10)

dilate_enum = gen.enum([
    gen.const("DILATE_OP_DILATE", int_t, 0, "Dilate operation"),
    gen.const("DILATE_OP_ERODE", int_t, 1, "Erode operation"),
    gen.const("DILATE_OP_OPEN", int_t, 2, "Open operation")
], "Morphological operation type for dilate")

gen.add("dilate_operation", int_t, 0, "Morphological operation type for dilate", 0, 0, 2, edit_method=dilate_enum)

# 裁切后图像保存路径
gen.add("output_directory", str_t, 0, "Directory to save cropped images", "/home/user/cropped_images/")

exit(gen.generate(PACKAGE, "gbx_cropping", "ImageProcessing"))